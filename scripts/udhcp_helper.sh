#!/bin/ash
#
# WHAT: udhcpc helper script
# AUTHOR: Brane F. Gracnar <bfg@interseek.si>
# 

#
# Id: $Id: linuxrc.sh 8 2006-10-18 17:56:52Z bfg $
# Last changed on: $LastChangedDate: 2006-10-18 17:56:52Z $
# Last changed by: $LastChangedBy: bfg $
#

##############################################
#                 GLOBALS                    #
##############################################

# The ip(8) command
IP="`which ip 2>/dev/null`"
IFCONFIG="`which ifconfig 2>/dev/null`"

# resolver configuration file
RCONF="/etc/resolv.conf"

# The paramaters for enviromental variables are as follows:
#
#	$HOME		- The set $HOME env or "/"
#	$PATH		- the set $PATH env or "/bin:/usr/bin:/sbin:/usr/sbin"
#	$1			- What action the script should perform
#	interface	- The interface this was obtained on
#	ip			- The obtained IP
#	siaddr		- The bootp next server option
#	sname		- The bootp server name option
#	boot_file	- The bootp boot file option
#	subnet		- The assigend subnet mask
#	timezone	- Offset in seconds from UTC
#	router		- A list of routers
#	timesvr		- A list of time servers
#	namesvr		- A list of IEN 116 name servers
#	dns			- A list of DNS server
#	logsvr		- A list of MIT-LCS UDP log servers
#	cookiesvr	- A list of RFC 865 cookie servers
#	lprsvr		- A list of LPR servers
#	hostname	- The assigned hostname
#	bootsize	- The length in 512 octect blocks of the bootfile
#	domain		- The domain name of the network
#	swapsvr		- The IP address of the client's swap server
#	rootpath	- The path name of the client's root disk
#	ipttl		- The TTL to use for this network
#	mtu			- The MTU to use for this network
#	broadcast	- The broadcast address for this network
#	ntpsrv		- A list of NTP servers
#	wins		- A list of WINS servers
#	lease		- The lease time, in seconds
#	dhcptype	- DHCP message type (safely ignored)
#	serverid	- The IP of the server
#	message		- Reason for a DHCPNAK
#	tftp		- The TFTP server name
#	bootfile	- The bootfile name

##############################################
#                FUNCTIONS                   #
##############################################

MYNAME="`basename $0`"
VERSION="0.1"

die() {
	logger "$MYNAME: error: $@"
	echo "# Error: $@"
	exit 1
}

# deconfig: This argument is used when udhcpc starts, and
# when a leases is lost. The script should put the interface in an
# up, but deconfigured state, ie: ifconfig $interface 0.0.0.0.
dev_deconfig() {
	# flush all interface addresses
	${IP} addr flush dev ${interface}

	# bring it up
	${IP} link set dev ${interface} up
}

# bound: This argument is used when udhcpc moves from an
# unbound, to a bound state. All of the paramaters are set in
# enviromental variables, The script should configure the interface,
# and set any other relavent parameters (default gateway, dns server, 
# etc).
dev_bound() {
	# update device address
	dev_conf
	
	# update resolver config
	resolv_conf

	# set up routes
	route_conf
}

# renew: This argument is used when a DHCP lease is renewed. All of
# the paramaters are set in enviromental variables. This argument is
# used when the interface is already configured, so the IP address,
# will not change, however, the other DHCP paramaters, such as the
# default gateway, subnet mask, and dns server may change.
dev_renew() {
	resolv_conf
	route_conf
}

# nak: This argument is used with udhcpc receives a NAK message.
# The script with the deconfig argument will be called directly
# afterwards, so no changes to the network interface are neccessary.
# This hook is provided for purely informational purposes (the
# message option may contain a reason for the NAK).
dev_nak() {
	logger "$MYNAME: Received NAK response from DHCP server ${serverid}: ${message}"
	return 0
}

dev_conf() {
	# configure interface address
	# TODO: this should be done using ip(8) command
	#
	# ${IP} addr add ${ip}/${subnet} dev ${interface} || die "Unable to assign IPv4 address ${ip}/${subnet} to device ${interface}."
	${IFCONFIG} ${interface} ${ip} netmask ${subnet} up || die "Unable to assign IPv4 address ${ip}/${subnet} to device ${interface}."
	
	# bring interface up (well, this should be already done)
	${IP} link set dev ${interface} up || die "Unable to bring loopback device up. This is weird..."
}

# build /etc/resolv.conf
resolv_conf() {
	local old_domain=""
	local old_nameservers=""
	if [ -f "${RCONF}" ]; then
		old_domain="`cat ${RCONF} | egrep '^search ' | tail -n 1`"
		old_nameservers="`cat ${RCONF} | egrep '^nameserver ' | awk '{print $2}' | tr '\n' ' '`"
	fi
	
	# write new one
	echo "# This file was auto generated by $MYNAME $VERSION at `date +'%c %Z'`" > "${RCONF}"
	echo "" >> "${RCONF}"
	echo "search ${domain} ${old_domain}" >> "${RCONF}"
	echo ""  >> "${RCONF}"

	local x=""
	for x in ${dns} ${old_nameservers}; do
		echo "nameserver ${x}"  >> "${RCONF}"
	done

	echo "" >> "${RCONF}"
	echo "# EOF" >> "${RCONF}"
}

route_conf() {
	if [ -n "${router}" ] ; then
		# delete routers for interface $interface
		while route -n del default gw 0.0.0.0 dev $interface 2> /dev/null; do
			true
		done

		if route -n | egrep "^0.0.0.0" >/dev/null 2>&1; then
			# default route already in place
			true
		else
			# add default router $router
			route add default gw $router dev $interface
		fi
	fi
}

##############################################
#                   MAIN                     #
##############################################

test ! -x "${IP}" && die "Unable to find command ip(8) in \$PATH: $PATH"
test ! -x "${IFCONFIG}" && die "Unable to find command ifconfig(8) in \$PATH: $PATH"

case $1 in
	deconfig)
		dev_deconfig
		;;
	
	bound)
		dev_bound
		;;
	
	renew)
		dev_renew
		;;
	
	nak)
		dev_nak
		;;

	version)
		echo "$MYNAME $VERSION"
		exit 0
		;;
	
	*)
		echo "Usage: ${MYNAME} {deconfig|bound|renew|nak|version}"
		exit 1
		;;
esac

exit 0
# EOF